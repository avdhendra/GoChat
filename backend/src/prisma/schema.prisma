generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "darwin"]
}

datasource db {
    provider = "mongodb"
    url      = env("MONGODB_URI")
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String                    @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    conversations ConversationParticipant[] //a user can be part of many conversations
    email         String?                   @unique
    emailVerified DateTime?
    message       Message[]
    image         String?
    username      String?                   @unique
    accounts      Account[]
    sessions      Session[]
    createdAt     DateTime                  @default(now())
    updatedAt     DateTime                  @updatedAt
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

//every time we change the schema we need to run the 
//npx prisma genrate ? optional if we get an error  --schema=path to schema .prisma file

//Conversation Model
model Conversation {
    id              String                    @id @default(auto()) @map("_id") @db.ObjectId
    messages        Message[]
    participants    ConversationParticipant[] // a conversation have many participants
    latestMessageId String                    @unique
    latestMessage   Message?                  @relation(name: "latestConversationMessage", fields: [latestMessageId], references: [id], onUpdate: NoAction, onDelete: NoAction)
    createdAt       DateTime                  @default(now())
    updatedAt       DateTime                  @updatedAt
}

model ConversationParticipant {
    id                   String       @id @default(auto()) @map("_id") @db.ObjectId
    userId               String
    user                 User         @relation(fields: [userId], references: [id]) //userId of conversationparticipant is linking with the id of User model 
    conversationId       String
    conversation         Conversation @relation(fields: [conversationId], references: [id])
    hasSeenLatestMessage Boolean
}

model Message {
    id             String        @id @default(auto()) @map("_id") @db.ObjectId
    conversationId String
    isLatestIn     Conversation? @relation(name: "latestConversationMessage")
    conversation   Conversation  @relation(fields: [conversationId], references: [id])
    senderId       String
    sender         User          @relation(fields: [senderId], references: [id])
    createdAt      DateTime      @default(now())
    updatedAt      DateTime      @updatedAt
    body           String
}
